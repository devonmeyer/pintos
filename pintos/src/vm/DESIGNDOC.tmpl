       	       	    +---------------------------+
		    |		CS 140		|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Devon Meyer <devonmey@usc.edu>
Alex Young <youngale@usc.edu>
Ryan Cleary <rcleary@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

We referenced the following sources:

https://www.doc.ic.ac.uk/~mjw03/OSLab/task3slides-4up.pdf
http://people.csail.mit.edu/rinard/osnotes/h10.html

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct spt_entry {
	struct hash_elem hash_elem; /* Hash table element. */
	struct list_elem list_elem; /* To be used in the Mapid Table. */
	void *page_num; /* The virtual page number, acts as the key for the hash table. */
	void *frame_num; /* The physical frame number. */
	int sector_num; /* The sector number representing the beginning of the swap slot. */
	int file_offset; /* Where in the file this is mem_mapping begins. */
	struct file * file;
	mapid_t mapid;
	bool in_swap;
};

-- A supplemental page table entry holding all relevant metadata for a given page table entry.

struct thread {
	
	...

	struct hash sup_page_table;
}

-- A reference to the process's supplemental page table hash.




---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

We created a supplemental page table that handles any case where the frame is not already mapped to the page in the hardware page table.

This was the case for swapped pages, memory mapped pages, and cases where the stack grew beyond the allocated page.

Essentially the page fault handler would identify whether or not an access to a given address could possibly be one of these cases, and
if so, calls a method in the supplemental page table to determine what case it would be, and provide the frame allocation appropriately.

The SPT would then find the page that the user is trying to access using a hash-based data structure, and using some metadata, determines
the type of missing case for the page. If the frame is not already allocated, one is allocated by the frame table, and then mapped
to the virtual address provided, so that the Supplemental Page Table is no longer necessary for that page mapping for the time being.

After this process, the hardware page table is an adequate handler of page mapping.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

If a frame is being swapped out or de-allocated, the frame table calls into the hardware page table and the supplemental page table
to ascertain if the dirty or accessed bits have been set. Essentially, the frame table can make the determination and act accordingly, 
because it knows where to look (the Hardware Page Table and the Supplemental Page Table).

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We have a frame table lock that locks the system down any time that a new frame is being allocated, or a frame is being evicted.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?


We felt that due to the simplicity of the PintOS project, we could make some performance-hindering decisions without having 
a noticeable impact. For instance, the frame-table does not use a hashing mechanism because its main functionality requires it
to find the best candidate for eviction, in which case either a priority based data structure or linked-list would be optimal, therefore
we chose a linked list.
The SPT, due to its need to quickly find an entry based on a given page, used a hash mechanism.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


struct list ft_list;

-- The frame table

struct ft_entry {
	void * frame_number;
	void * page_number;
	struct thread * t;
	struct list_elem elem;
};

-- A frame table entry, mapping a frame number to a page number, and also storing the thread that currently owns the frame.

struct lock ft_lock;

-- The lock on the Frame Table, used to synchronize evictions and frame allocations

struct lock st_lock;			// Lock to prevent multi-threaded access
struct block * swap_block;		// Block device partitioned for swap
struct bitmap * st_bitmap;		// One to one bitmap of sectors to keep track of swap slots

-- The swap-table's data structure to manage swapping frames in and out of the swap partition, and synchronizing them.



---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We have a priority in terms of choosing:
Highest priority candidate to evict...
- Not used, not dirty
- Not used, Dirty
- Used, not Dirty
- Used, Dirty

So we iterate through the frame table, and if a frame exists for the given set of conditions above, we place one of them on the
frame table's chopping block. This is somewhat arbitrary, as the frames in the lower part of the frame table will be more likely
to be replaced. Either way, we then choose a frame that belongs to the highest priority group mentioned above.

I.e. if there exists any frame where used, dirty == 0,0, then we will choose some frame such that used, dirty == 0,0.
else, if there exists any frame where used, dirty == 0,1 then we will choose some frame such that used, dirty == 0,1. Etc.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We essentially tell the supplemental page table that Q's page is still available (in the swap partition), though an access to it
will not be mapped. Therefore, the SPT can now know that if Q tries to access the page, the SPT can request that the FT swap in 
P's page, and then the FT maps that page so that P can use it again.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

There are two simple heuristics:
1. (Process's current Stack Pointer - 32) <= fault_addr
	I.e. the access is within one word of the current top of the stack, therefore a valid attempt to grow the stack
2. (PHYS_BASE - pg_round_down(fault_addr)) <= 67108864
	I.e. the access is no more than 8MB away from the base of the stack, therefore the stack has not exceeded its maximum allocation.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

	Circular wait cannot happen within a process because our processes are single-threaded.
	Mutual exclusion is not a problem between processes because the frame table manages the lock, not the process itself.
		Therefore, if the frame table is locked down, the eviction/allocation operation must execute atomically, because there
		are no other possible ways for the processes to execute.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

	There is a lock held by the Frame Table that will not be released until Q's frame is fully evicted.
	Therefore, when Q page faults and requests that the page be brought back in, it must wait until the process
	of eviction has completed, due to the frame table lock, before it can request that Q's page be brought back in.


>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

	Again, the frame table does not allow a frame that is currently being read in to be evicted, because the
	entire process of reading in a new page from the file system requires a lock. Therefore, before a page can be evicted,
	the lock must be acquired, and the read must execute atomically thereafter.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

	If there is an access to an invalid virtual address in a system call, (we have yet to implement this at the time of writing this design document), a call to a 'pseudo-page-fault-handler' performs the same operation that the page fault handler does if it were to receive the access.

	To put it simply, there are only some cases where a page fault must be intercepted, so we handle those cases in the system call infrastructure with the pseudo page fault handler.


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

	We tended towards one lock for the VM system. This allowed us to very easily manage the synchronization issues across the board.
	As the question states, it limits parallelism, but we didn't feel that for the constraints of this project, it was a necessity
	to have a system optimized for parallel operations. Optimizing for solid synchronization, however, was definitely a design constraint.


			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


	struct thread {

	...	

    struct list mmap_table[16];

	}


	An array holding 16 possible lists of memory maps for a given process.
	(16 because there are a max of 16 files for a PintOS file system)

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

	We allocate enough entries in the SPT to be able to hold every page of the file. Then, when the process attempts to access a given page of the file, we allocate a frame for it and write the page to that frame. This is a lazy allocation, though when a page that is memory-mapped must be evicted, we determine whether it needs written back to the file-- if so, we perform the write on the file directly, and if not, we have no need of swapping it into the swap partition because the page exists perfectly in the existing file system.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

	First, we determine if the file mapping refers to an already-mapped address by calling into the process's page directory. If it's a valid mapping, then we know that this intersects with an existing segment, and system_exit(-1). We then make a call into the SPT to determine if there has been a supplemental mapping or swapped-out frame, or otherwise unallocated, but previously-mapped page for this page number. If so, we system_exit(-1). If we haven't system_exit'd yet by this point, all is well and we let the file map occur.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
	(at the time of writing this document this has yet to be implemented)
	Our code separates the functionality simply because there is an extra requirement for mmap-- if the file has been changed, we write, otherwise, we don't. For any swap, we write. Therefore, in the case of mmapping, we have some additional logic, and to make our code more comprehensible, we didn't completely integrate the two functions.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
